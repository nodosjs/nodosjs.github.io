(self.webpackChunksite=self.webpackChunksite||[]).push([[1],{3905:function(e,t,s){"use strict";s.d(t,{Zo:function(){return p},kt:function(){return m}});var n=s(7294);function o(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}function r(e,t){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),s.push.apply(s,n)}return s}function i(e){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{};t%2?r(Object(s),!0).forEach((function(t){o(e,t,s[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):r(Object(s)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(s,t))}))}return e}function a(e,t){if(null==e)return{};var s,n,o=function(e,t){if(null==e)return{};var s,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)s=r[n],t.indexOf(s)>=0||(o[s]=e[s]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)s=r[n],t.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(o[s]=e[s])}return o}var l=n.createContext({}),u=function(e){var t=n.useContext(l),s=t;return e&&(s="function"==typeof e?e(t):i(i({},t),e)),s},p=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var s=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),d=u(s),m=o,h=d["".concat(l,".").concat(m)]||d[m]||c[m]||r;return s?n.createElement(h,i(i({ref:t},p),{},{components:s})):n.createElement(h,i({ref:t},p))}));function m(e,t){var s=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=s.length,i=new Array(r);i[0]=d;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a.mdxType="string"==typeof e?e:o,i[1]=a;for(var u=2;u<r;u++)i[u]=s[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,s)}d.displayName="MDXCreateElement"},6069:function(e,t,s){"use strict";s.r(t),s.d(t,{frontMatter:function(){return i},contentTitle:function(){return a},metadata:function(){return l},toc:function(){return u},default:function(){return c}});var n=s(2122),o=s(9756),r=(s(7294),s(3905)),i={title:"Routing",slug:"/routing"},a=void 0,l={unversionedId:"routing",id:"routing",isDocsHomePage:!1,title:"Routing",description:"This guide covers the user-facing features of Nodos routing.",source:"@site/docs/routing.md",sourceDirName:".",slug:"/routing",permalink:"/docs/routing",editUrl:"https://github.com/nodosjs/nodos/tree/master/site/docs/routing.md",version:"current",frontMatter:{title:"Routing",slug:"/routing"},sidebar:"docs",previous:{title:"models",permalink:"/docs/models"},next:{title:"controllers",permalink:"/docs/controllers"}},u=[{value:"The Purpose of the Nodos Router",id:"the-purpose-of-the-nodos-router",children:[]},{value:"Routes file",id:"routes-file",children:[]},{value:"Resource Routing on the Web: the Nodos Default",id:"resource-routing-on-the-web-the-nodos-default",children:[]},{value:"CRUD, Verbs, and Actions",id:"crud-verbs-and-actions",children:[]},{value:"Nested Resources",id:"nested-resources",children:[]},{value:"Pipelines",id:"pipelines",children:[]},{value:"The :browser and :api Pipelines",id:"the-browser-and-api-pipelines",children:[]},{value:"Creating New Pipelines",id:"creating-new-pipelines",children:[]}],p={toc:u};function c(e){var t=e.components,s=(0,o.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,n.Z)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This guide covers the user-facing features of Nodos routing."),(0,r.kt)("p",null,"After reading this guide, you will know:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"[\u2713]"," How to interpret the code in config/routes.yml.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"[\u2713]"," How to construct your own routes"))),(0,r.kt)("h2",{id:"the-purpose-of-the-nodos-router"},"The Purpose of the Nodos Router"),(0,r.kt)("p",null,"The users of your website or web application can visit different URL's like ",(0,r.kt)("inlineCode",{parentName:"p"},"/"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"/about")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"/user/1"),". To make these URLs work, you will have to define them as routes."),(0,r.kt)("p",null,"Routers are the main hubs of Nodos applications. They match HTTP requests and dispatch them to a controller's action, and define a series of pipeline transformations scoped to a set of routes."),(0,r.kt)("p",null,"Routes are definedinside the ",(0,r.kt)("inlineCode",{parentName:"p"},"config/routes.yml"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"- app/\n     config/\n       routes.yml\n")),(0,r.kt)("h2",{id:"routes-file"},"Routes file"),(0,r.kt)("p",null,"The routes for your application or engine live in the file ",(0,r.kt)("inlineCode",{parentName:"p"},"config/routes.yml")," and typically looks like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"pipelines:\n  browser:\n    - '@nodosjs/view-extension/fetchFlash'\n    - '@nodosjs/view-extension/protectFromForgery'\n\nscopes:\n  - name: /\n    pipeline: browser\n    root: true\n    routes:\n      - resources: users\n")),(0,r.kt)("p",null,"Both the router and controller module names same."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"pipeline: browser")," line will get a full treatment in the Pipeline section of this guide."),(0,r.kt)("p",null,"For now, you only need to know that pipelines allow a set of plugs to be applied to different sets of routes."),(0,r.kt)("p",null,"Inside block, we have our first actual routes ",(0,r.kt)("inlineCode",{parentName:"p"},"/users"),"."),(0,r.kt)("p",null,"When your Nodos application receives an incoming request for: ",(0,r.kt)("inlineCode",{parentName:"p"},"GET /users/1")," it asks the router to match it to a controller action."),(0,r.kt)("p",null,"If the first matching route is: ",(0,r.kt)("inlineCode",{parentName:"p"},"get '/users/:id'")," the request is dispatched to the users controller's index action with { id: '1' } in params."),(0,r.kt)("h2",{id:"resource-routing-on-the-web-the-nodos-default"},"Resource Routing on the Web: the Nodos Default"),(0,r.kt)("p",null,"Resource routing allows you to quickly declare all of the common routes for a given resourceful controller."),(0,r.kt)("p",null,"A single call to resources can declare all of the necessary routes for your index, show, new, edit, create, update, and destroy actions."),(0,r.kt)("p",null,"Browsers request pages from Nodos by making a request for a URL using a specific HTTP method, such as GET, POST, PATCH, PUT and DELETE."),(0,r.kt)("p",null,"Each method is a request to perform an operation on the resource. A resource route maps a number of related requests to actions in a single controller."),(0,r.kt)("p",null,"When your Nodos application receives an incoming request for:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"DELETE /users/1")),(0,r.kt)("p",null,"it asks the router to map it to a controller action. If the first matching route is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"    routes:\n      - resources: users\n")),(0,r.kt)("p",null,"Nodos would dispatch that request to the destroy action on the users controller with { id: '1' } in params."),(0,r.kt)("h2",{id:"crud-verbs-and-actions"},"CRUD, Verbs, and Actions"),(0,r.kt)("p",null,"In Nodos, a resourceful route provides a mapping between HTTP verbs and URLs to controller actions."),(0,r.kt)("p",null,"By convention, each action also maps to a specific CRUD operation in a database."),(0,r.kt)("p",null,"A single entry in the routing file, such as:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"    routes:\n      - resources: users\n")),(0,r.kt)("p",null,"creates eight  different routes in your application, all mapping to the Users controller."),(0,r.kt)("p",null,"Running ",(0,r.kt)("inlineCode",{parentName:"p"},"npx nodos routes")," now shows that we have all the routes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"Name             Verb   URI Pattern                       Pipeline Controller#Action\nusers            GET    /users                            browser  users#index\nbuildUser        GET    /users/build                      browser  users#build\nusers            POST   /users                            browser  users#create\nuser             GET    /users/:id                        browser  users#show\neditUser         GET    /users/:id/edit                   browser  users#edit\nuser             PATCH  /users/:id                        browser  users#update\nuser             PUT    /users/:id                        browser  users#update\nuser             DELETE /users/:id                        browser  users#destroy\n")),(0,r.kt)("p",null,"Because the router uses the HTTP verb and URL to match inbound requests, four URLs map to eight different actions."),(0,r.kt)("h2",{id:"nested-resources"},"Nested Resources"),(0,r.kt)("p",null,"It is also possible to nest resources in a Nodos router."),(0,r.kt)("p",null,"Let's say we also have a posts resource which has a many-to-one relationship with comments. Let's add a new resource."),(0,r.kt)("p",null,"That is to say, we have many posts, and an individual comment belongs to only one post."),(0,r.kt)("p",null,"We can represent that by adding a nested route in config/router.yml like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"pipelines:\n  browser:\n    - '@nodosjs/view-extension/fetchFlash'\n    - '@nodosjs/view-extension/protectFromForgery'\n\n  api:\n    - example/setLocale\n    - example/setLocale\n\nscopes:\n  - name: api\n    pipeline: api\n    routes:\n      - resources: users\n  - name: /\n    pipeline: browser\n    root: true\n    routes:\n      - resources: users\n      - resources:\n          name: posts\n          routes:\n            - resources: comments\n")),(0,r.kt)("p",null,"When we run ",(0,r.kt)("inlineCode",{parentName:"p"},"npx nodos routes")," now, in addition to the routes we saw for users above, we get the following set of routes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"Name             Verb   URI Pattern                       Pipeline Controller#Action\nusers            GET    /users                            browser  users#index\nbuildUser        GET    /users/build                      browser  users#build\nusers            POST   /users                            browser  users#create\nuser             GET    /users/:id                        browser  users#show\neditUser         GET    /users/:id/edit                   browser  users#edit\nuser             PATCH  /users/:id                        browser  users#update\nuser             PUT    /users/:id                        browser  users#update\nuser             DELETE /users/:id                        browser  users#destroy\nposts            GET    /posts                            browser  posts#index\nbuildPost        GET    /posts/build                      browser  posts#build\nposts            POST   /posts                            browser  posts#create\npost             GET    /posts/:id                        browser  posts#show\neditPost         GET    /posts/:id/edit                   browser  posts#edit\npost             PATCH  /posts/:id                        browser  posts#update\npost             PUT    /posts/:id                        browser  posts#update\npost             DELETE /posts/:id                        browser  posts#destroy\npostComments     GET    /posts/:post_id/comments          browser  posts/comments#index\nbuildPostComment GET    /posts/:post_id/comments/build    browser  posts/comments#build\npostComments     POST   /posts/:post_id/comments          browser  posts/comments#create\npostComment      GET    /posts/:post_id/comments/:id      browser  posts/comments#show\neditPostComment  GET    /posts/:post_id/comments/:id/edit browser  posts/comments#edit\npostComment      PATCH  /posts/:post_id/comments/:id      browser  posts/comments#update\npostComment      PUT    /posts/:post_id/comments/:id      browser  posts/comments#update\npostComment      DELETE /posts/:post_id/comments/:id      browser  posts/comments#destroy\n")),(0,r.kt)("p",null,"We see that each of these routes scopes the posts to a comments ID."),(0,r.kt)("p",null,"For the first one, we will invoke the controller index action, but we will pass in a ",(0,r.kt)("inlineCode",{parentName:"p"},"post_id"),"."),(0,r.kt)("p",null,"This implies that we would display all the comments for that individual posts only."),(0,r.kt)("p",null,"The same scoping applies for all these routes."),(0,r.kt)("h2",{id:"pipelines"},"Pipelines"),(0,r.kt)("p",null,"We have come quite a long way in this guide without talking about one of the first lines we saw in the router. It's time to fix that."),(0,r.kt)("p",null,"Pipelines are a series of plugs that can be attached to specific scopes."),(0,r.kt)("p",null,"Routes are defined inside scopes and scopes may pipe through multiple pipelines."),(0,r.kt)("p",null,"Once a route matches, Nodos invokes all plugs defined in all pipelines associated to that route."),(0,r.kt)("p",null,'For example, accessing "/" will pipe through the :browser pipeline, consequently invoking all of its plugs.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"pipelines:\n  browser:\n    - '@nodosjs/view-extension/fetchFlash'\n    - '@nodosjs/view-extension/protectFromForgery'\n")),(0,r.kt)("p",null,"Nodos defines two pipelines by default, ",(0,r.kt)("inlineCode",{parentName:"p"},":browser")," and ",(0,r.kt)("inlineCode",{parentName:"p"},":api"),", which can be used for a number of common tasks."),(0,r.kt)("p",null,"In turn we can customize them as well as create new pipelines to meet our needs."),(0,r.kt)("h2",{id:"the-browser-and-api-pipelines"},"The :browser and :api Pipelines"),(0,r.kt)("p",null,"As their names suggest, the ",(0,r.kt)("inlineCode",{parentName:"p"},":browser")," pipeline prepares for routes which render requests for a browser."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},":api")," pipeline prepares for routes which produce data for an api."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},":browser")," pipeline has 2 plugs:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"'@nodosjs/view-extension/fetchFlash'")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"'@nodosjs/view-extension/protectFromForgery'")),(0,r.kt)("p",null,"The router invokes a pipeline on a route defined within a scope."),(0,r.kt)("h2",{id:"creating-new-pipelines"},"Creating New Pipelines"),(0,r.kt)("p",null,"Nodos allows us to create our own custom pipelines anywhere in the router. "),(0,r.kt)("p",null,"To do so, we create a new middleware and add to routes.yml"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"- app/\n     middlewares/\n       yourMiddlewares.js\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"pipelines:\n  browser:\n    - '@nodosjs/view-extension/fetchFlash'\n    - '@nodosjs/view-extension/protectFromForgery'\n    - yourMiddlewares\n\n  api:\n    - example/setLocale\n    - example/setLocale\n\nscopes:\n  - name: api\n    pipeline: api\n    routes:\n      - resources: users\n  - name: /\n    pipeline: browser\n    root: true\n    routes:\n      - resources: users\n      - resources:\n          name: posts\n          routes:\n            - resources: comments\n")),(0,r.kt)("p",null,"Right now when the server accepts a request, the request will always first pass through the plugs in our Endpoint, after which it will attempt to match on the path and HTTP verb."),(0,r.kt)("p",null,"Let's say that the request matches our first route: a GET to ",(0,r.kt)("inlineCode",{parentName:"p"},"/")," ."),(0,r.kt)("p",null,"The router will first pipe that request through the ",(0,r.kt)("inlineCode",{parentName:"p"},":browser")," pipeline before it dispatches the request to the contoller index action."))}c.isMDXComponent=!0}}]);